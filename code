<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Générateur d'Embed Discord</title>
  <style>
    body {
      background: #2c2f33;
      color: white;
      font-family: Arial, sans-serif;
      display: flex;
      gap: 20px;
      padding: 20px;
      height: 100vh;
      overflow: hidden;
    }
    .form-section, .preview-section {
      flex: 1;
      background: #23272a;
      padding: 20px;
      border-radius: 10px;
      display: flex;
      flex-direction: column;
      overflow-y: auto;
    }
    input, textarea, select, button {
      width: 100%;
      margin-top: 10px;
      padding: 8px;
      border-radius: 5px;
      border: none;
      background: #2c2f33;
      color: white;
    }
    button {
      background-color: #7289da;
      cursor: pointer;
    }
    button:hover {
      background-color: #5b6eae;
    }
    .embed {
      background: #2f3136;
      border-left: 5px solid #7289da; /* Couleur par défaut */
      padding: 16px;
      border-radius: 5px;
      display: flex;
      flex-direction: column;
      gap: 12px;
      position: relative;
    }
    .embed .author {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 8px;
    }
    .embed .author img {
      width: 20px;
      height: 20px;
      border-radius: 50%;
    }
    .embed .title {
      font-size: 1.2em;
      font-weight: bold;
      margin: 0;
    }
    .embed .description {
      margin: 4px 0 0 0;
      font-size: 0.95em;
      max-height: 200px; /* Limiter la hauteur maximale */
      overflow-y: auto; /* Ajouter une barre de défilement si nécessaire */
    }
    .embed .thumbnail {
      width: 80px;
      height: auto; /* Conserver les proportions de l'image */
      border-radius: 10px;
      position: absolute;
      top: 16px;
      right: 16px;
      cursor: pointer;
    }
    .embed .image {
      max-width: 100%;
      border-radius: 5px;
      margin-top: 12px;
      cursor: pointer;
    }
    .embed .footer {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.85em;
      color: #aaaaaa;
      margin-top: 8px;
    }
    .embed .footer img {
      width: 20px;
      height: 20px;
      border-radius: 50%;
    }
    .embed .timestamp {
      font-size: 0.85em;
      color: #aaaaaa;
    }
    .command-box {
      background: #23272a;
      padding: 10px;
      border-radius: 5px;
      margin-top: 10px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .command-box pre {
      background: #2f3136;
      padding: 10px;
      border-radius: 5px;
      width: 100%;
      overflow: auto;
      white-space: pre-wrap;
      word-wrap: break-word;
    }
    .command-box button {
      margin-top: 10px;
    }
    textarea.adaptive {
      overflow: hidden; /* Cacher la barre de défilement */
      min-height: 50px; /* Hauteur minimale */
      max-height: 200px; /* Hauteur maximale */
      resize: none; /* Désactiver la redimension manuelle */
    }
  </style>
</head>
<body>

<div class="form-section">
  <h1>Générateur d'Embed</h1>

  <label>Titre :</label>
  <input type="text" id="titre" oninput="updatePreview()">

  <label>Description :</label>
  <textarea id="description" class="adaptive" oninput="updatePreview()"></textarea>

  <label>Couleur :</label>
  <input type="color" id="couleur" oninput="updatePreview()">

  <label>URL :</label>
  <input type="text" id="url" oninput="updatePreview()">

  <label>Auteur :</label>
  <input type="text" id="auteur" oninput="updatePreview()">

  <label>URL de l'icône de l'auteur :</label>
  <input type="text" id="auteur_icon" oninput="updatePreview()">

  <label>URL de l'auteur :</label>
  <input type="text" id="auteur_url" oninput="updatePreview()">

  <label>Miniature :</label>
  <input type="text" id="miniature" oninput="updatePreview()">

  <label>Image principale :</label>
  <input type="text" id="image" oninput="updatePreview()">

  <label>Pied de page :</label>
  <input type="text" id="footer" oninput="updatePreview()">

  <label>Icône du pied de page :</label>
  <input type="text" id="footer_icon" oninput="updatePreview()">

  <label>Afficher la date :</label>
  <select id="timestamp" onchange="updatePreview()">
    <option value="false">Non</option>
    <option value="true">Oui</option>
  </select>

  <button onclick="genererCommande()">Générer la Commande</button>
</div>

<div class="preview-section">
  <h2>Prévisualisation</h2>
  <div id="embed" class="embed">
    <div class="author" id="auteur_preview"></div>
    <div id="titre_preview_container">
      <a href="" id="titre_preview_link" target="_blank"><div class="title" id="titre_preview"></div></a>
    </div>
    <div class="description" id="description_preview"></div>
    <a href="" id="miniature_preview_link" target="_blank"><img class="thumbnail" id="miniature_preview" alt="Miniature"></a>
    <a href="" id="image_preview_link" target="_blank"><img class="image" id="image_preview" alt="Image"></a>
    <div class="footer" id="footer_preview"></div>
  </div>
  <h2>Commande Générée</h2>
  <div class="command-box">
    <button onclick="copyCommand()">Copier</button>
    <pre id="commande"></pre>
  </div>
</div>

<script>
function updatePreview() {
  const titre = document.getElementById('titre').value;
  const description = document.getElementById('description').value;
  const couleur = document.getElementById('couleur').value;
  const url = document.getElementById('url').value;
  const auteur = document.getElementById('auteur').value;
  const auteur_icon = document.getElementById('auteur_icon').value;
  const auteur_url = document.getElementById('auteur_url').value;
  const miniature = document.getElementById('miniature').value;
  const image = document.getElementById('image').value;
  const footer = document.getElementById('footer').value;
  const footer_icon = document.getElementById('footer_icon').value;
  const timestamp = document.getElementById('timestamp').value;

  const embedDiv = document.getElementById('embed');
  embedDiv.style.borderLeftColor = couleur; // Appliquer la couleur à la bordure

  const titrePreview = document.getElementById('titre_preview');
  titrePreview.innerText = titre || 'Titre';

  const titreLink = document.getElementById('titre_preview_link');
  if (url) {
    titreLink.href = url;
  } else {
    titreLink.href = '#';
    titreLink.removeAttribute('href');
  }

  document.getElementById('description_preview').innerText = description || 'Description';

  const auteurPreview = document.getElementById('auteur_preview');
  auteurPreview.innerHTML = '';
  if (auteur || auteur_icon) {
    if (auteur_icon) {
      const auteurIconImg = document.createElement('img');
      auteurIconImg.src = auteur_icon;
      auteurPreview.appendChild(auteurIconImg);
    }
    if (auteur) {
      const auteurText = document.createElement(auteur_url ? 'a' : 'span');
      auteurText.innerText = auteur;
      if (auteur_url) {
        auteurText.href = auteur_url;
        auteurText.target = '_blank';
      }
      auteurPreview.appendChild(auteurText);
    }
  }

  const miniaturePreview = document.getElementById('miniature_preview');
  const miniatureLink = document.getElementById('miniature_preview_link');
  if (miniature) {
    miniaturePreview.src = miniature;
    miniatureLink.href = miniature;
    miniaturePreview.style.display = 'block';
  } else {
    miniaturePreview.style.display = 'none';
    miniatureLink.removeAttribute('href');
  }

  const imagePreview = document.getElementById('image_preview');
  const imageLink = document.getElementById('image_preview_link');
  if (image) {
    imagePreview.src = image;
    imageLink.href = image;
    imagePreview.style.display = 'block';
  } else {
    imagePreview.style.display = 'none';
    imageLink.removeAttribute('href');
  }

  const footerPreview = document.getElementById('footer_preview');
  footerPreview.innerHTML = '';

  if (footer || footer_icon) {
    if (footer_icon) {
      const footerIconImg = document.createElement('img');
      footerIconImg.src = footer_icon;
      footerPreview.appendChild(footerIconImg);
    }
    if (footer) {
      const footerText = document.createElement('span');
      footerText.innerText = footer;
      footerPreview.appendChild(footerText);
    }
  }

  if (timestamp === 'true') {
    if (footer || footer_icon) {
      const date = new Date().toISOString().split('T')[0];
      const timestampDiv = document.createElement('span');
      timestampDiv.classList.add('timestamp');
      timestampDiv.innerText = ` • ${date}`;
      footerPreview.appendChild(timestampDiv);
    } else {
      const date = new Date().toISOString().split('T')[0];
      footerPreview.innerText = `• ${date}`;
    }
  }
}

function genererCommande() {
  const titre = document.getElementById('titre').value;
  const description = document.getElementById('description').value;
  const couleur = document.getElementById('couleur').value.replace('#', '');
  const url = document.getElementById('url').value;
  const auteur = document.getElementById('auteur').value;
  const auteur_icon = document.getElementById('auteur_icon').value;
  const auteur_url = document.getElementById('auteur_url').value;
  const miniature = document.getElementById('miniature').value;
  const image = document.getElementById('image').value;
  const footer = document.getElementById('footer').value;
  const footer_icon = document.getElementById('footer_icon').value;
  const timestamp = document.getElementById('timestamp').value;

  // Construire la commande uniquement avec les champs non vides
  let commande = `/embed titre:${titre}`;

  if (description) commande += ` description:${description}`;
  if (couleur) commande += ` couleur:${couleur}`;
  if (url) commande += ` url:${url}`;
  if (auteur) commande += ` auteur:${auteur}`;
  if (auteur_icon) commande += ` auteur_icon:${auteur_icon}`;
  if (auteur_url) commande += ` auteur_url:${auteur_url}`;
  if (miniature) commande += ` miniature:${miniature}`;
  if (image) commande += ` image:${image}`;
  if (footer) commande += ` footer:${footer}`;
  if (footer_icon) commande += ` footer_icon:${footer_icon}`;
  if (timestamp === 'true') commande += ` timestamp:${timestamp}`;

  // Affichage de la commande générée
  document.getElementById('commande').innerText = commande;
}

function copyCommand() {
  const commande = document.getElementById('commande').innerText;
  navigator.clipboard.writeText(commande).then(() => {
    alert('Commande copiée !');
  });
}

// Initialiser la prévisualisation avec les valeurs par défaut
window.onload = updatePreview;

// Ajuster automatiquement la hauteur du textarea
const descriptionTextarea = document.getElementById('description');
descriptionTextarea.addEventListener('input', function() {
  this.style.height = 'auto'; // Réinitialiser la hauteur
  this.style.height = (this.scrollHeight) + 'px'; // Définir la hauteur en fonction du contenu
});
</script>

</body>
</html>
